#!/usr/bin/env bash
# vi: et ts=4 sw=4

set -m

if [[ -e /etc/profile.env ]]; then
    # shellcheck disable=SC1091
    source /etc/profile.env
fi

declare -r TAB=$'\t'
declare -r CSI=$'\e['
declare -r FG=3
declare -r YELLOW=3
declare -r CYAN=6
declare -r BOLD=1
declare -r UNDERLINE=4
declare -r TITLE="${CSI}${BOLD};${UNDERLINE};${FG}${CYAN}m"
declare -r DATUM="${CSI}${BOLD};${FG}${YELLOW}m"
declare -r NORM="${CSI}m"
declare -r ICON_OK="✅"
declare -r ICON_WARN="⚠️"
declare -r ICON_ERR="❌"
declare -r ICON_INFO="ℹ️"
declare -r ICON_NEW="🎁"
declare -r ICON_ROBOT="🤖"
declare -r ICON_CLEAN=$'\xf0\x9f\xa7\xb9'
declare -r ICON_WAIT="⏳"
declare -r BULLET="•"

declare REBUILD_OLD_MONTHS=3

plural() {
    if [[ $3 -ne 1 ]]; then
        echo "$1"
    else
        echo "$2"
    fi
}

style() {
    echo "$*$NORM"
}

oops() {
    (( ++errors )) || :
}

journal() {
    local icon=

    while [[ $# -gt 0 ]]; do
        case "$1" in
        --icon)
            shift
            icon="$1"
            shift
            ;;
        *)
            break
        esac
    done

    style "${icon}${icon:+ }${TITLE}$*"
    echo
    cat
    echo
}

journalled() {
    local icon="$ICON_OK" title stdout stderr ret
    stdout="$(mktemp --tmpdir="$tmpdir")"
    stderr="$(mktemp --tmpdir="$tmpdir")"

    while [[ $# -gt 0 ]]; do
        case "$1" in
        --icon)
            shift
            icon="$1"
            shift
            ;;
        *)
            break
        esac
    done

    title="$1"
    shift

    if [[ -n $verbose ]]; then
        printf '%s' "$(style "${ICON_WAIT} ${TITLE}$title")"
    fi

    "$@" >"$stdout" 2>"$stderr"
    ret="$?"

    if [[ -n $verbose ]]; then
        printf '%s' "${CSI}0E${CSI}K"
    fi

    (( ret )) && icon="$ICON_ERR"

    {
        if (( ret )); then
            oops
            echo "This command failed with code $(style "$DATUM$ret"):"
            echo
            echo "$TAB$*"
            echo
            echo "Standard output was:"
            echo
            sed 's/^/\t/' < "$stdout"
            echo
            echo "Standard error was:"
            echo
            sed 's/^/\t/' < "$stderr"
        elif [[ -s "$stdout" ]]; then
            cat "$stdout"
        fi
    } | journal --icon "$icon" "$title"

    rm "$stdout" "$stderr"

    return "$ret"
}

cleanup() {
    for j in $(jobs -p); do
        kill -INT -- -"$j"
    done
    wait
    for i in emerge{,-fetch}.log; do
        if [ -f "$tmpdir/$i" ]; then
            cat < "$tmpdir/$i" >> /var/log/"$i"
        fi
    done
    [ -f "$tmpdir"/.eebydeeby ] && rm -rf "$tmpdir"
}

do-sync() {
    emaint sync -A > /dev/null || return $?
    eix-diff > "$tmpdir"/eix-diff.txt

    if [[ -s $tmpdir/eix-diff.txt ]]; then
        {
            echo "These installed packages got updated by the Gentoo maintainers:"
            echo
            cat "$tmpdir"/eix-diff.txt
        } | email "$ICON_NEW Repository updates!"
    fi
}

do-emerge() {
    emerge --color n --keep-going -qvuDN --with-bdeps=y --accept-properties=-interactive --accept-restrict=-fetch @world \
    >/dev/null
}

rebuild-old() {
    local -a atoms
    local oldest="$(( $(date +%s) - 60*60*24*30*REBUILD_OLD_MONTHS ))"

    mapfile -t atoms < <(
        eix '-I*' --format '<installedversions:DATESORT>' \
        | awk -v OLDEST="$oldest" '$1<OLDEST { print $4 }' \
        | grep -Fxv '' \
        | grep -Ev '^acct-(group|user)/'
    )

    if [[ ${#atoms[@]} -gt 0 ]]; then
        echo "Rebuilding ${#atoms[@]} old $(plural package packages "${#atoms[@]}")."
        emerge --color n --keep-going --oneshot -qv --accept-properties=-interactive --accept-restrict=-fetch "${atoms[@]}" >/dev/null
    else
        echo "No old packages found."
    fi
}

installed-size() {
    equery -q size -b \* \
    | sed 's/.*size(\([0-9]\+\))/\1/' \
    | awk 'BEGIN{x=0}{x+=$0}END{print x}' \
    | numfmt --to=iec-i --format=%fB
}

update-kernel() {
    ebdb-kernel "$@" >/dev/null
}

eclean-distfiles() {
    command eclean -d distfiles -f "$@" | tail -n 20
}

revdep-rebuild() {
    command revdep-rebuild -- --keep-going -q > /dev/null
}

is-network-up() {
    [[ $(nmcli network connectivity check) == full ]]
}

wait-for-network() {
    local retries=30
    sleep 10
    until is-network-up; do
        sleep 10
        if (( --retries == 0 )); then
            echo "Network didn't come up in time!" >&2
            return 1
        fi
    done
}

inhibit-suspend() {
    local -a uids
    mapfile -t uids < <(systemctl show user@\*.service -P UID|grep -Fxv '')
    for i in "${uids[@]}"; do
        local name bus="/run/user/$i/bus"
        if ! [[ -S $bus ]]; then
            continue
        fi
        name="$(getent passwd "$i"|cut -d: -f1)"
        env -i DBUS_SESSION_BUS_ADDRESS=unix:path="$bus" \
        sudo --preserve-env=DBUS_SESSION_BUS_ADDRESS \
             --user="$name" \
             gnome-session-inhibit --inhibit suspend --inhibit-only --reason "Eebydeeby is doing some cleaning..." >/dev/null &
    done
}

fix-repo-perms() {
    local repo owner path chowned chmoded
    local -a gitsudo=()

    while read -r repo owner; do
        path="$(portageq get_repo_path / "$repo")" || continue
        chowned=$(chown -cR "$owner" "$path" | wc -l)
        chmoded=$(chmod -cR g+rX "$path" | wc -l)

        if (( UID == 0 )); then
            gitsudo=( sudo -u "${owner%:*}" )
        fi

        if [[ -d "$path"/.git ]]; then
            "${gitsudo[@]}" git -C "$path" update-index -q --refresh
        fi

        if (( chowned > 0 || chmoded > 0 )); then
            printf 'Files changed in repository "%s"!\n\n' "$repo"
            if (( chowned > 0 )); then
                printf "${TAB}Owner changed to %s: %5d\n\n" "$owner" "$chowned"
            fi
            if (( chmoded > 0 )); then
                printf "${TAB}Mode changed:        %5d\n\n" "$chmoded"
            fi
        fi
    done < <( portageq repos_config / | \
        awk 'match($0,/^\[(.*)]/,a){repo=a[1]} $1=="sync-user"{print repo, " ", $3}' \
    )
}

usage() {
    cat<<EOF
Usage: $0 [options...]

Options:

${TAB}--verbose, -v${TAB}Verbose. Don't email, print to stdout.
${TAB}${TAB}${TAB}Default: on if stdout is a terminal, off otherwise.

${TAB}--quiet, -q${TAB}Quiet. Turns off --verbose.

${TAB}--nosync, -n${TAB}Don't 'emaint sync'.

${TAB}--help, -h${TAB}This text.
EOF
}

if [[ -t 1 ]]; then
    verbose=1
else
    verbose=
fi

nosync=

while [ $# -gt 0 ]; do
    opt="$1"
    shift
    case "$opt" in
    -v|--verbose)
        verbose=1;;
    -q|--quiet)
        verbose=;;
    -n|--no-sync)
        nosync=1;;
    -h|--help)
        usage
        exit
    esac
done

myname="$0"
recipients=alex.iris.parker@gmail.com
tmpdir="$(mktemp -d)" || exit 1
errorlog="$tmpdir/stderr.txt"
errors=0
badnews=

trap cleanup 0

chown portage:portage "$tmpdir"
chmod 770 "$tmpdir"

export HOME=~portage
rootbin=~root/bin
export PATH="$rootbin:$PATH"
export FORCE_COLORS=true
export FEATURES=-candy
export EMERGE_LOG_DIR="$tmpdir"
export DIFF_FORMAT_NEW=
export DIFF_FORMAT_DELETE=
export DIFF_ONLY_INSTALLED=true

touch "$tmpdir/.eebydeeby" || exit 1

{
    equery l -F \$cpv @module-rebuild | \
        tail -n +1 > "$tmpdir"/dracut-packages.txt
} &
equery_job=$!


if [[ -n $verbose ]]; then
    email() {
        echo
        echo "$subject"
        echo
        cat
        return
    }
else
    exec 1>"$tmpdir/journal.txt"
    exec 2>"$errorlog"

    email() {

        subject="$1"

        {
            echo "From: $recipients"
            echo "Subject: $ICON_ROBOT $HOSTNAME: $subject"
            echo "Content-Type: text/html; charset=utf-8"
            echo
            {
                cat
                echo
                echo '-- '
                echo "Mail generated by $myname"
                echo 'Exterminate! Exterminate!'
            } | ansi2html -a
        } | sendmail "$recipients"
    }
fi

main() {
    inhibit-suspend

    if ! journalled --icon "$ICON_CLEAN" "Fix repository permissions" fix-repo-perms ; then
        badnews="Couldn't fix the repository perms"
        return 1
    fi

    if ! is-network-up && \
        ! journalled --icon "$ICON_WAIT" "Wait for the network to come up" wait-for-network
    then
        badnews="The network didn't come up in time"
        return 1
    fi

    if [ -z "$nosync" ]; then
        if ! journalled "Synchronize the repositories" do-sync; then
            badnews="Failed to synchronize!"
            return 1
        fi
    fi

    if journalled "Update @world" do-emerge; then
        journalled "Rebuild old packages" rebuild-old
    else
        badnews="${badnews} Failed to update @world!"
    fi

    if ! journalled "Ensure linking consistency" revdep-rebuild; then
        badnews="${badnews} Failed to ensure linking consistency!"
    fi

    grep -F ') Merging (' "$tmpdir"/emerge.log | awk -v FS='[():]' '{print $5}' > "$tmpdir"/merged.txt
    declare -a merged
    mapfile -t merged < "$tmpdir"/merged.txt

    if [[ ${#merged[@]} -gt 0 ]]; then
        {
            while read -r line; do
                echo "${TAB}${BULLET} $(style "${DATUM}$line")"
            done < "$tmpdir"/merged.txt
        } | journal --icon "$ICON_INFO" "I merged these packages:"
    fi

    wait "$equery_job"

    if ! update-kernel --check; then
        local nv
        nv="$(ebdb-kernel --newest)"
        if journalled "Update to Linux kernel $nv." update-kernel; then
            journalled --icon "$ICON_CLEAN" "Clean old kernels." eclean-kernel -n 3
        fi
    elif grep -qFf "$tmpdir"/dracut-packages.txt < "$tmpdir"/merged.txt; then
        journalled "Update the initial ram disk." dracut --force
    fi

    : | needrestart -qnrl | grep -Fv 'systemctl restart user@' > "$tmpdir"/needrestart.txt

    if [[ -s "$tmpdir"/needrestart.txt ]]; then
        sed 's/^/\t/' < "$tmpdir"/needrestart.txt \
        | journal --icon "$ICON_WARN" "These services need to be restarted:"
    fi

    journalled --icon "$ICON_CLEAN" "Clean the distfiles" eclean-distfiles

    echo "Goodbye!" \
    | journal --icon "$ICON_INFO" "Total installed package size is now: ${CSI}${FG}${YELLOW}m$(installed-size)"
}

main

if [[ -z $verbose ]]; then
    if [[ -n $badnews ]]; then
        subj="$ICON_ERR ${badnews}"
    elif (( errors == 0 )); then
        subj="$ICON_OK Eebydeeby ran successfully"
    else
        subj="$ICON_WARN Eebydeeby ran with errors"
    fi
    email "$subj" < "$tmpdir"/journal.txt
fi
