#!/usr/bin/env bash
# vi: et ts=4 sw=4

set -muo pipefail

if [[ -e /etc/profile.env ]]; then
    # shellcheck disable=SC1091
    source /etc/profile.env
fi

declare -r TAB=$'\t'
declare -r CSI=$'\e['
declare -r FG=3
declare -r YELLOW=3
declare -r CYAN=6
declare -r BOLD=1
declare -r UNDERLINE=4
declare -r TITLE="${CSI}${BOLD};${UNDERLINE};${FG}${CYAN}m"
declare -r DATUM="${CSI}${BOLD};${FG}${YELLOW}m"
declare -r NORM="${CSI}m"
declare -r ICON_OK="✅"
declare -r ICON_WARN="⚠️"
declare -r ICON_ERR="❌"
declare -r ICON_INFO="ℹ️"
declare -r ICON_NEW="🎁"
declare -r ICON_ROBOT="🤖"
declare -r ICON_CLEAN=$'\xf0\x9f\xa7\xb9'
declare -r ICON_WAIT="⏳"
declare -r BULLET="•"

declare REBUILD_OLD_MONTHS=3

plural() {
    if [[ $3 -eq 1 ]]; then
        echo "$1"
    else
        echo "$2"
    fi
}

style() {
    echo "$*$NORM"
}

oops() {
    (( ++errors )) || :
}

journal() {
    local icon=

    while [[ $# -gt 0 ]]; do
        case "$1" in
        --icon)
            shift
            icon="$1"
            shift
            ;;
        *)
            break
        esac
    done

    style "${icon}${icon:+ }${TITLE}$*"
    echo
    cat
    echo
}

journalled() {
    local icon="$ICON_OK" title stdout stderr ret
    stdout="$(mktemp --tmpdir="$tmpdir")"
    stderr="$(mktemp --tmpdir="$tmpdir")"

    while [[ $# -gt 0 ]]; do
        case "$1" in
        --icon)
            shift
            icon="$1"
            shift
            ;;
        *)
            break
        esac
    done

    title="$1"
    shift

    if [[ -n $verbose ]]; then
        printf '%s' "$(style "${ICON_WAIT} ${TITLE}$title")"
    fi

    "$@" >"$stdout" 2>"$stderr"
    ret="$?"

    if [[ -n $verbose ]]; then
        printf '%s' "${CSI}0E${CSI}K"
    fi

    (( ret )) && icon="$ICON_ERR"

    {
        if (( ret )); then
            oops
            echo "This command failed with code $(style "$DATUM$ret"):"
            echo
            echo "$TAB$*"
            echo
            echo "Standard output was:"
            echo
            sed 's/^/\t/' < "$stdout"
            echo
            echo "Standard error was:"
            echo
            sed 's/^/\t/' < "$stderr"
        elif [[ -s "$stdout" ]]; then
            cat "$stdout"
        fi
    } | journal --icon "$icon" "$title"

    rm "$stdout" "$stderr"

    return "$ret"
}

cleanup() {
    for j in $(jobs -p); do
        kill -INT -- -"$j"
    done
    wait
    for i in emerge{,-fetch}.log; do
        if [ -f "$tmpdir/$i" ]; then
            cat < "$tmpdir/$i" >> /var/log/"$i"
        fi
    done
    [[ -f $tmpdir/.eebydeeby ]] && rm -rf "$tmpdir"
}

do-sync() {
    emaint sync -A > /dev/null || return $?
    eix-diff > "$tmpdir"/eix-diff.txt

    if [[ -s $tmpdir/eix-diff.txt ]]; then
        {
            echo "These installed packages received updates:"
            echo
            cat "$tmpdir"/eix-diff.txt

        } | email "$ICON_NEW Repository updates!"

        if [[ $(eselect news count new) != 0 ]]; then
            eselect news read | email "$ICON_NEW Gentoo News!"
        fi
    fi
}

do-emerge() {
    local rmmod=()

    if emerge -pvnuN --nodeps www-client/firefox mail-client/thunderbird \
        | grep -Eo -- '-?pgo\b' \
        | grep -Fxq pgo; then

        if [[ ! -d /sys/modules/nvidia ]]; then
            modprobe nvidia \
            && rmmod+=( nvidia_drm nvidia_uvm nvidia_modeset nvidia )
        fi
    fi

    emerge --autounmask n --color n --keep-going -qvuDN --with-bdeps=y --accept-properties=-interactive --accept-restrict=-fetch @world \
        > /dev/null || return $?

    if [[ ${#rmmod[@]} -gt 0 ]]; then
        rmmod "${rmmod[@]}" || :
    fi
}

do-restart() {
    systemctl restart "${torestart[@]}"
    if [[ -v reexec_systemd ]]; then
        systemctl daemon-reexec
    fi
}

rebuild-old() {
    local -a atoms
    local oldest="$(( $(date +%s) - 60*60*24*30*REBUILD_OLD_MONTHS ))"
    local -x DATESORT='<date:DATESORT_DATE>\t<category>/<name>-<version>:<slot>\n'

    mapfile -t atoms < <(
        eix '-I*' --format '<installedversions:DATESORT>' \
        | awk -v OLDEST="$oldest" '$1<OLDEST { print $4 }' \
        | grep -Fxv '' \
        | grep -Ev '^acct-(group|user)/'
    )

    if [[ ${#atoms[@]} -gt 0 ]]; then
        echo "Rebuilding ${#atoms[@]} old $(plural package packages "${#atoms[@]}")."
        emerge --color n --keep-going --oneshot -qv --accept-properties=-interactive --accept-restrict=-fetch "${atoms[@]}" >/dev/null
    else
        echo "No old packages found."
    fi
}

update-kernel() {
    ebdb-kernel "$@" >/dev/null
}

# Usage: is-initrd-valid
#
# Returns true if initrd is valid, false otherwise. Here, "valid"
# means the kernel modules in the initrd match the local filesystem.
#
# Having out-of-date files in the initrd isn't always a problem as
# long as they're consistent with each other since the root filesystem
# in the initrd will be left behind after pivoting to the real root
# filesystem. However, kernel modules loaded this way persist even
# after the pivot; the kernel doesn't load newer kernel modules from
# the real root.
is-initrd-valid() {
    # Ideally, find the initramfs that will boot next time. That's too much work though.
    # Alternatively, we could loop through all initrds, but that's time consuming.
    local initramfs
    initramfs="$(
        find /boot -maxdepth 1 -type f -name '*.img' -print0 \
        | sort -zVr | head -zn1 | tr -d '\000'
    )" || return $?

    if ! [[ -f $initramfs ]]; then
        return 1
    fi

    mkdir "$tmpdir"/initrd && (
        cd "$tmpdir"/initrd \
        && lsinitrd --unpack "$initramfs" lib/modules/\*.ko \
        || exit $?
    ) || return $?

    while read -r f; do
        if ! cmp -s "/$f" "$tmpdir/initrd/$f"; then
            return 1
        fi
    done < <(cd "$tmpdir"/initrd && find . -type f)

    return 0
}

eclean-distfiles() {
    command eclean -d distfiles -f "$@" | tail -n 20
}

revdep-rebuild() {
    command revdep-rebuild -- --keep-going -q > /dev/null
}

is-network-up() {
    networkctl list --no-legend \
    | awk '{print $4}' \
    | grep -qFx routable
}

wait-for-network() {
    local retries=30
    sleep 10
    until is-network-up; do
        sleep 10
        if (( --retries == 0 )); then
            echo "Network didn't come up in time!" >&2
            return 1
        fi
    done
}

fix-repo-perms() {
    local repo owner path chowned chmoded
    local -a gitsudo=()

    while read -r repo owner; do
        path="$(portageq get_repo_path / "$repo")" || continue
        chowned=$(chown -cR "$owner" "$path" | wc -l)
        chmoded=$(chmod -cR g+rX "$path" | wc -l)

        if (( UID == 0 )); then
            gitsudo=( sudo -u "${owner%:*}" )
        fi

        if [[ -d "$path"/.git ]]; then
            "${gitsudo[@]}" git -C "$path" update-index -q --refresh
        fi

        if (( chowned > 0 || chmoded > 0 )); then
            printf 'Files changed in repository "%s"!\n\n' "$repo"
            if (( chowned > 0 )); then
                printf "${TAB}Owner changed to %s: %5d\n\n" "$owner" "$chowned"
            fi
            if (( chmoded > 0 )); then
                printf "${TAB}Mode changed:        %5d\n\n" "$chmoded"
            fi
        fi
    done < <( portageq repos_config / | \
        awk 'match($0,/^\[(.*)]/,a){repo=a[1]} $1=="sync-user"{print repo, " ", $3}' \
    )
}

main() {
    if ! journalled --icon "$ICON_CLEAN" "Fix repository permissions" fix-repo-perms ; then
       badnews="Couldn't fix the repository perms"
       return 1
    fi

    if ! is-network-up && \
        ! journalled --icon "$ICON_WAIT" "Wait for the network to come up" wait-for-network
    then
        badnews="The network didn't come up in time"
        return 1
    fi

    if [[ -n $sync ]]; then
        if ! journalled "Synchronize the repositories" do-sync; then
            badnews="Failed to synchronize!"
            return 1
        fi
    fi

    if journalled "Update @world" do-emerge; then
        journalled "Rebuild old packages" rebuild-old
    else
        badnews="${badnews} Failed to update @world!"
    fi

    if ! journalled "Ensure linking consistency" revdep-rebuild; then
        badnews="${badnews} Failed to ensure linking consistency!"
    fi

    grep -F ') Merging (' "$tmpdir"/emerge.log | awk -v FS='[():]' '{print $5}' > "$tmpdir"/merged.txt
    declare -a merged
    mapfile -t merged < "$tmpdir"/merged.txt

    if [[ ${#merged[@]} -gt 0 ]]; then
        {
            while read -r line; do
                echo "${TAB}${BULLET} $(style "${DATUM}$line")"
            done < "$tmpdir"/merged.txt
        } | journal --icon "$ICON_INFO" "I merged these packages:"
    fi

    if ! update-kernel --check; then
        local newkconfig
        local nv
        nv="$(ebdb-kernel --newest)"
        newkconfig="$(ebdb-kernel --list-new-kconfig)"
        if [[ -n $newkconfig ]]; then
            printf "These kernel options are new:\n\n%s\n\nDon't worry, I didn't set them for you!" \
                "$newkconfig" | journal --icon "$ICON_NEW" "New kernel options:"
            unset newkconfig
        fi

        if journalled "Update to Linux kernel $nv." update-kernel; then
            journalled --icon "$ICON_CLEAN" "Clean old kernels." eclean-kernel -n 3
        fi
    fi

    if ! is-initrd-valid; then
        journalled "Repair the initial ram disk." dracut --force
    fi

    local needrestart=
    local torestart=()
    local svc

    while read -r svc; do
        case "$svc" in
        user@*|eebydeeby.*)
            ;;
        systemd-manager)
            local reexec_systemd=1
            needrestart=1
            ;;
        *.service)
            torestart+=( "$svc" )
            needrestart=1
        esac
    done < <(needrestart -b | awk '$1=="NEEDRESTART-SVC:"{print $2}')

    if [[ -n $needrestart ]]; then
        local i

        {
            for i in "${torestart[@]}"; do
                printf '\t%s\n' "$i"
            done

            if [[ -v reexec_systemd ]]; then
                echo $'\tSystemd itself'
            fi
        } | journal  --icon "$ICON_WARN" "Need to restart these services:"

        if [[ -n $restart ]] && ! journalled --icon "$ICON_INFO" "Restarting services" do-restart; then
            badnews="${badnews} Failed to restart services."
        fi
    fi


    journalled --icon "$ICON_CLEAN" "Clean the distfiles" eclean-distfiles

    echo "Goodbye!" \
    | journal --icon "$ICON_INFO" "Install size: ${CSI}${FG}${YELLOW}m$(qsize -S)"
}


usage() {
    cat<<EOF
Usage: $0 [options...]

Options:

${TAB}--verbose, -v${TAB}Verbose. Don't email, print to stdout.
${TAB}${TAB}${TAB}Default: on if stdout is a terminal, off otherwise.

${TAB}--quiet, -q${TAB}Quiet. Turns off --verbose.

${TAB}--no-sync${TAB}Don't 'emaint sync'.

${TAB}--no-restart${TAB}Don't restart services.

${TAB}--help, -h${TAB}This text.
EOF
}

if [[ -t 1 ]]; then
    verbose=1
else
    verbose=
fi

sync=1
restart=1

# Lifted from the getopt example in util-linux
if ! TEMP=$(getopt -o 'vqh' --long 'verbose,quiet,no-sync,no-restart,help' -n "$0" -- "$@"); then
    echo 'Terminating...' >&2
    exit 1
fi

# Note the quotes around "$TEMP": they are essential!
eval set -- "$TEMP"
unset TEMP


while true; do
    opt="$1"
    shift
    case "$opt" in
    -v|--verbose) verbose=1;;
    -q|--quiet) verbose=;;
    --no-sync) sync=;;
    --no-restart) restart=;;
    -h|--help)
        usage
        exit
        ;;
    --)
        shift
        break
        ;;
    esac
done

myname="$0"
recipients=alex.iris.parker@gmail.com
tmpdir="$(mktemp -d)" || exit 1
errorlog="$tmpdir/stderr.txt"
errors=0
badnews=

trap cleanup 0

chown portage:portage "$tmpdir"
chmod 770 "$tmpdir"

export HOME=~portage
rootbin=~root/bin
export PATH="$rootbin:$PATH"
export FORCE_COLORS=true
export FEATURES=-candy
export EMERGE_LOG_DIR="$tmpdir"
export DIFF_FORMAT_NEW=
export DIFF_FORMAT_DELETE=
export DIFF_ONLY_INSTALLED=true

touch "$tmpdir/.eebydeeby" || exit 1

if [[ -n $verbose ]]; then
    email() {
        local subject="$ICON_ROBOT $HOSTNAME: $1"

        echo
        echo "$subject"
        echo
        cat
        return
    }
else
    exec 1>"$tmpdir/journal.txt"
    exec 2>"$errorlog"

    email() {

        local subject="$ICON_ROBOT $HOSTNAME: $1"
        subject="=?utf-8?B?$(basenc --base64 -w0 <<< "$subject")?="

        {
            echo "From: $recipients"
            echo "Subject: $subject"
            echo "Content-Type: text/html; charset=utf-8"
            echo
            {
                cat
                echo
                echo '-- '
                echo "Mail generated by $myname"
                echo 'Exterminate! Exterminate!'
            } | ansi2html -a
        } | sendmail "$recipients"
    }
fi

main

if [[ -z $verbose ]]; then
    if [[ -n $badnews ]]; then
        subj="$ICON_ERR ${badnews}"
    elif (( errors == 0 )); then
        subj="$ICON_OK Eebydeeby ran successfully"
    else
        subj="$ICON_WARN Eebydeeby ran with errors"
    fi
    email "$subj" < "$tmpdir"/journal.txt
fi
