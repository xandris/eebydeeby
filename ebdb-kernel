#!/bin/bash

set -e

quote()
{
    local quoted="${1//\'/\'\\\'\'}"
    printf "'%s'" "$quoted"
}

quote-all() {
    while [ $# -gt 0 ]; do
    	quote "$1"
    	shift
    	echo -n ' '
    done
}

if [[ $(id -ng) != portage ]]; then
    exec sg portage "$(quote-all "$0" "$@")"
fi

umask 022

newest-version() {
    local nv
    nv="$( find /usr/src -maxdepth 1 -type d -name 'linux-*' -printf '%f\0' \
	| sort -zVr | head -zn1 | tr -d '\0' )"
    nv="${nv#linux-}"
    echo "$nv"
}

usage() {
    cat<<EOF
Usage: $0 <options> <new version>
Current symlink: $csl
Current version: $cv
Symlink and version should match

Options:

\t-h --help\t\tShow this text

\t-c --check\t\tReturn 0 if symlink up to date, 1 otherwise

\t-n --newest\t\tPrint the newest kernel available
EOF
}

fatal() {
    echo "$@"
    exit 1
}

cv="$(uname -r)"
csl="$(readlink -f /usr/src/linux)"
ckd="/usr/src/linux-$cv"

case "$1" in
-h|--help)
    usage
    exit
    ;;
-c|--check)
    [[ "$(newest-version)" == "${csl#*linux-}" ]] || exit $?
    exit
    ;;
-n|--newest)
    newest-version
    exit
    ;;
*)
    nv="$1"
esac

[ -d "$ckd" ] || fatal "$ckd" does not exist.

if [ -z "$nv" ]; then
    nv="$(newest-version)"
fi

[ -z "$nv" ] && { usage; exit 1; }

nkd="/usr/src/linux-$nv"

if ! [ -d "$nkd" ]; then
    fatal "$nkd does not exist."
fi

if [[ ! -e $nkd/.patched && -d /etc/eebydeeby/kernel-patches.d ]]; then
    echo "Patching $nv..."
    while read -rd '' patch; do
        echo "	applying $patch..."
        patch -d "$nkd" -p1 < "$patch"
    done < <(find /etc/eebydeeby/kernel-patches.d -maxdepth 1 -type f -name '*.patch' -print0)
    touch "$nkd/.patched"
    echo "$nv patched"
fi

if [[ ! -f $nkd/.configured ]]; then
    echo "Configuring $nv..."

    if [[ ! -f $nkd/.config ]]; then
        echo "Copying config from $cv"

        cp {"$ckd","$nkd"}/.config
    fi

    make -C "$nkd" oldconfig
    touch "$nkd"/.configured
else
    echo "Kernel $nv is already configured."
fi

echo "Building $nv..."

log="$(mktemp)"

{
    make -C "$nkd" -j9 -l7 bzImage modules > "$log" && \
    make -C "$nkd" modules_install > "$log"
} || {
    cat "$log"
    fatal "Kernel failed to compile"
}

if [ -h /usr/src/linux ]; then
    rm /usr/src/linux
elif [ -e /usr/src/linux ]; then
    fatal "/usr/src/linux exists but is not a symlink"
fi

ln -s "linux-$nv" /usr/src/linux

echo "Installing $nv..."

if ! mountpoint -q /boot; then
    mount /boot
    mounted=true
fi

make -C "$nkd" install

echo "Loading new kernel with kexec"
kexec -l "/boot/vmlinuz-$nv" --initrd "/boot/initramfs-$nv.img" --reuse-cmdline -a

if [[ -v mounted ]]; then
    umount /boot
fi

